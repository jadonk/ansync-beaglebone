{"_id":"ref","_rev":"49-8dc29b18c30512a8edfc1d12bec119b3","name":"ref","description":"Turn Buffer instances into \"pointers\"","dist-tags":{"latest":"0.1.3"},"versions":{"0.0.1":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++"],"version":"0.0.1","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"08fc69166dc273207cb1b945573a94cacb1e2c8e","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.1.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.2":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++"],"version":"0.0.2","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"d39a6d76e7a079de00840e3aacb59643db26016b","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.2.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.3":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.3","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"99957e9c8e757e5a51a3b468a70ebbb3a32e3491","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.3.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.4":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.4","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.4","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"d9bc4ca94767433ab330509f38938d94564729d8","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.4.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.5":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.5","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"fb8a4a4d268f1109d474d492fedf596795ce1590","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.5.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.6":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.6","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.6","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"ae5d05b7f46b98c11a591624bb0d6cf7b1fcf197","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.6.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.7":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.7","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.7","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"783b970e952dd291b472ed54034d7875fcf340f4","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.7.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.8":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.8","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.8","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"4dfc96575e61d89cea361e84f5936faa40e651e8","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.8.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.9":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.9","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.9","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"28b0312125ef64a93d2cfd313f24f48447bfe245","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.9.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.10":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.10","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.10","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"6c6f3cbb784378da6d5c0cca1b1afac8bc30e483","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.10.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.11":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.11","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.11","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.8","_defaultsLoaded":true,"dist":{"shasum":"cb25767c54fc90b8b18bace24709eb373b8fde45","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.11.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.12":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.12","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.12","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.9","_defaultsLoaded":true,"dist":{"shasum":"21fd7526f028ebf09ef4b03c7c755d1913d2074c","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.12.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.13":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.13","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.13","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.9","_defaultsLoaded":true,"dist":{"shasum":"084be375d77e871b32109a5f0b96279818b8818e","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.13.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.14":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.14","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.14","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.9","_defaultsLoaded":true,"dist":{"shasum":"e822c8652ecf11822cc3387c5d542fe59e7413d3","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.14.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.15":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.15","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.15","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.7.9","_defaultsLoaded":true,"dist":{"shasum":"a80d94f41eb2cfa561555070ef3b735a63c83626","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.15.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.16":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.16","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.16","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"ecaeebb084042f128422f9bb3b652a27048782f8","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.16.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.17":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.17","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*"},"engines":{"node":"*"},"_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"_id":"ref@0.0.17","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"5aa82eab53a08c34e2a34f31db6560658d94cae3","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.17.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.18":{"name":"ref","description":"ref === ### Turn Buffer instances into \"pointers\" [![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.18","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"jade docs/index.jade --obj \"{ dox: $(dox < lib/ref.js) }\"","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"debug":"*"},"devDependencies":{"mocha":"*","weak":"*","dox":"*","jade":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nAdditions to `Buffer.prototype`\n-------------------------------\n\n`ref` extends Node's core `Buffer` instances with some useful additions:\n\n---\n\n#### `Buffer#address()` → Number\n\nReturns the memory address of the Buffer instance.\n\n---\n\n#### `Buffer#isNull()` → Boolean\n\nReturns `true` if the Buffer's memory address is NULL, `false` otherwise.\n\n---\n\n#### `Buffer#ref()` → Buffer\n\nReturns a new Buffer instance that is referencing this Buffer. That is, the new\nBuffer is \"pointer\" sized, and points to the memory address of this Buffer.\n\nThe returned Buffer's `type` property gets set properly as well, with an\n`indirection` level increased by 1.\n\n---\n\n#### `Buffer#deref()` → ???\n\nReturns the dereferenced value from the Buffer instance. This depends on the\n`type` property being set to a proper \"type\" instance (see below).\n\nThe returned value can be another Buffer, or pretty much be anything else,\ndepending on the `get()` function of the \"type\" instance and current\n`indirection` level of the Buffer.\n\n---\n\n#### `Buffer#readObject(Number offset)` → Object\n\nReturns the JS `Object` that has previously been written to the Buffer at the\ngiven offset using `writeObject()`.\n\n---\n\n#### `Buffer#writeObject(Object obj, Number offset)` → undefined\n\nWrites the given JS `Object` to the Buffer at the given offset. Make sure that at\nleast `ref.sizeof.Object` bytes are available in the Buffer after the specified\noffset. The object can later be retrieved using `readObject()`.\n\n`obj` gets \"attached\" to the buffer instance, so that the written object won't\nbe garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readPointer(Number offset, Number size)` → Buffer\n\nReturns a new Buffer instance pointing to the address specified in this Buffer at\nthe given offset. The `size` is the length of the returned Buffer, which defaults\nto 0.\n\n---\n\n#### `Buffer#writePointer(Buffer pointer, Number offset)` → undefined\n\nWrites the given Buffer's memory address to this Buffer at the given offset. Make\nsure that at least `ref.sizeof.pointer` bytes are available in the Buffer after\nthe specified offset. The Buffer can later be retrieved again using\n`readPointer()`.\n\n`pointer` gets \"attached\" to the buffer instance, so that the written pointer\nwon't be garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readCString(Number offset)` → String\n\nReturns a JS String from read from the Buffer at the given offset. The C String is\nread up til the first NULL byte, which indicates the end of the C String.\n\nThis function can read beyond the length of a Buffer, and reads up until the first\nNULL byte regardless.\n\n---\n\n#### `Buffer#writeCString(String string, Number offset, String encoding)` → undefined\n\nWrites `string` as a C String (i.e. NULL terminated) to this Buffer at the given\noffset. `encoding` is optional and defaults to `utf8`.\n\n---\n\n#### `Buffer#readInt64[native-endianness](Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64[native-endianness](Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64[native-endianness](Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64[native-endianness](Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#reinterpret(Number size)` → Buffer\n\nReturns a new Buffer instance with the exact same memory address as the target\nbuffer, only you can specifiy the size of the returned buffer as well.\n\nThe original buffer instance gets \"attached\" to the new buffer instance, so that\nthe original buffer won't be garbage collected until the new buffer does.\n\n__Warning:__ This function is potentially _dangerous_! There are only a small few\nuse-cases where it _really_ needs to be used (i.e. resizing a Buffer returned from\nan FFI'd `malloc()` call), but otherwise, try to avoid it!\n\n\nBuilt-in \"types\"\n----------------\n\n`ref` comes with all the basic fixed-size C types that you are probably familiar with:\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `void`       | A `void` type. Derefs to `null`\n| `int8`       | Signed 8-bit Integer\n| `uint8`      | Unsigned 8-bit Integer\n| `int16`      | Signed 16-bit Integer\n| `uint16`     | Unsigned 16-bit Integer\n| `int32`      | Signed 32-bit Integer\n| `uint32`     | Unsigned 32-bit Integer\n| `int64`      | Signed 64-bit Integer\n| `uint64`     | Unsigned 64-bit Integer\n| `float`      | Single Precision Floating Point Number (float)\n| `double`     | Double Precision Floating Point Number (double)\n| `Object`     | A type capable of reading/writing references to JS objects\n| `Utf8String` | NULL-terminated String (char *)\n\nIn addition to the basic types, there are type aliases for common C types.\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `bool`       | bool. Returns/accepts JS `true`/`false` values\n| `byte`       | unsigned char\n| `char`       | char\n| `uchar`      | unsigned char\n| `short`      | short\n| `ushort`     | unsigned short\n| `int`        | int\n| `uint`       | unsigned int\n| `long`       | long\n| `ulong`      | unsigned long\n| `longlong`   | long long\n| `ulonglong`  | unsigned long long\n| `size_t`     | platform-dependent, usually pointer size\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"ref@0.0.18","dist":{"shasum":"4f3e37aad7521e0f55a4f208ecb72351ac3ab565","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.18.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.19":{"name":"ref","description":"ref === ### Turn Buffer instances into \"pointers\" [![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.19","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"jade docs/index.jade --obj \"{ dox: $(dox < lib/ref.js) }\"","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"mocha":"*","weak":"*","dox":"*","jade":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nAdditions to `Buffer.prototype`\n-------------------------------\n\n`ref` extends Node's core `Buffer` instances with some useful additions:\n\n---\n\n#### `Buffer#address()` → Number\n\nReturns the memory address of the Buffer instance.\n\n---\n\n#### `Buffer#isNull()` → Boolean\n\nReturns `true` if the Buffer's memory address is NULL, `false` otherwise.\n\n---\n\n#### `Buffer#ref()` → Buffer\n\nReturns a new Buffer instance that is referencing this Buffer. That is, the new\nBuffer is \"pointer\" sized, and points to the memory address of this Buffer.\n\nThe returned Buffer's `type` property gets set properly as well, with an\n`indirection` level increased by 1.\n\n---\n\n#### `Buffer#deref()` → ???\n\nReturns the dereferenced value from the Buffer instance. This depends on the\n`type` property being set to a proper \"type\" instance (see below).\n\nThe returned value can be another Buffer, or pretty much be anything else,\ndepending on the `get()` function of the \"type\" instance and current\n`indirection` level of the Buffer.\n\n---\n\n#### `Buffer#readObject(Number offset)` → Object\n\nReturns the JS `Object` that has previously been written to the Buffer at the\ngiven offset using `writeObject()`.\n\n---\n\n#### `Buffer#writeObject(Object obj, Number offset)` → undefined\n\nWrites the given JS `Object` to the Buffer at the given offset. Make sure that at\nleast `ref.sizeof.Object` bytes are available in the Buffer after the specified\noffset. The object can later be retrieved using `readObject()`.\n\n`obj` gets \"attached\" to the buffer instance, so that the written object won't\nbe garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readPointer(Number offset, Number size)` → Buffer\n\nReturns a new Buffer instance pointing to the address specified in this Buffer at\nthe given offset. The `size` is the length of the returned Buffer, which defaults\nto 0.\n\n---\n\n#### `Buffer#writePointer(Buffer pointer, Number offset)` → undefined\n\nWrites the given Buffer's memory address to this Buffer at the given offset. Make\nsure that at least `ref.sizeof.pointer` bytes are available in the Buffer after\nthe specified offset. The Buffer can later be retrieved again using\n`readPointer()`.\n\n`pointer` gets \"attached\" to the buffer instance, so that the written pointer\nwon't be garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readCString(Number offset)` → String\n\nReturns a JS String from read from the Buffer at the given offset. The C String is\nread up til the first NULL byte, which indicates the end of the C String.\n\nThis function can read beyond the length of a Buffer, and reads up until the first\nNULL byte regardless.\n\n---\n\n#### `Buffer#writeCString(String string, Number offset, String encoding)` → undefined\n\nWrites `string` as a C String (i.e. NULL terminated) to this Buffer at the given\noffset. `encoding` is optional and defaults to `utf8`.\n\n---\n\n#### `Buffer#readInt64[native-endianness](Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64[native-endianness](Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64[native-endianness](Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64[native-endianness](Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#reinterpret(Number size)` → Buffer\n\nReturns a new Buffer instance with the exact same memory address as the target\nbuffer, only you can specifiy the size of the returned buffer as well.\n\nThe original buffer instance gets \"attached\" to the new buffer instance, so that\nthe original buffer won't be garbage collected until the new buffer does.\n\n__Warning:__ This function is potentially _dangerous_! There are only a small few\nuse-cases where it _really_ needs to be used (i.e. resizing a Buffer returned from\nan FFI'd `malloc()` call), but otherwise, try to avoid it!\n\n\nBuilt-in \"types\"\n----------------\n\n`ref` comes with all the basic fixed-size C types that you are probably familiar with:\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `void`       | A `void` type. Derefs to `null`\n| `int8`       | Signed 8-bit Integer\n| `uint8`      | Unsigned 8-bit Integer\n| `int16`      | Signed 16-bit Integer\n| `uint16`     | Unsigned 16-bit Integer\n| `int32`      | Signed 32-bit Integer\n| `uint32`     | Unsigned 32-bit Integer\n| `int64`      | Signed 64-bit Integer\n| `uint64`     | Unsigned 64-bit Integer\n| `float`      | Single Precision Floating Point Number (float)\n| `double`     | Double Precision Floating Point Number (double)\n| `Object`     | A type capable of reading/writing references to JS objects\n| `Utf8String` | NULL-terminated String (char *)\n\nIn addition to the basic types, there are type aliases for common C types.\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `bool`       | bool. Returns/accepts JS `true`/`false` values\n| `byte`       | unsigned char\n| `char`       | char\n| `uchar`      | unsigned char\n| `short`      | short\n| `ushort`     | unsigned short\n| `int`        | int\n| `uint`       | unsigned int\n| `long`       | long\n| `ulong`      | unsigned long\n| `longlong`   | long long\n| `ulonglong`  | unsigned long long\n| `size_t`     | platform-dependent, usually pointer size\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"ref@0.0.19","dist":{"shasum":"959f86f6b28d1d61c5d943e842fbf234201d36c4","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.19.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.0.20":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.0.20","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"jade docs/index.jade --obj \"{ dox: $(dox < lib/ref.js) }\"","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"mocha":"*","weak":"*","dox":"*","jade":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nAdditions to `Buffer.prototype`\n-------------------------------\n\n`ref` extends Node's core `Buffer` instances with some useful additions:\n\n---\n\n#### `Buffer#address()` → Number\n\nReturns the memory address of the Buffer instance.\n\n---\n\n#### `Buffer#isNull()` → Boolean\n\nReturns `true` if the Buffer's memory address is NULL, `false` otherwise.\n\n---\n\n#### `Buffer#ref()` → Buffer\n\nReturns a new Buffer instance that is referencing this Buffer. That is, the new\nBuffer is \"pointer\" sized, and points to the memory address of this Buffer.\n\nThe returned Buffer's `type` property gets set properly as well, with an\n`indirection` level increased by 1.\n\n---\n\n#### `Buffer#deref()` → ???\n\nReturns the dereferenced value from the Buffer instance. This depends on the\n`type` property being set to a proper \"type\" instance (see below).\n\nThe returned value can be another Buffer, or pretty much be anything else,\ndepending on the `get()` function of the \"type\" instance and current\n`indirection` level of the Buffer.\n\n---\n\n#### `Buffer#readObject(Number offset)` → Object\n\nReturns the JS `Object` that has previously been written to the Buffer at the\ngiven offset using `writeObject()`.\n\n---\n\n#### `Buffer#writeObject(Object obj, Number offset)` → undefined\n\nWrites the given JS `Object` to the Buffer at the given offset. Make sure that at\nleast `ref.sizeof.Object` bytes are available in the Buffer after the specified\noffset. The object can later be retrieved using `readObject()`.\n\n`obj` gets \"attached\" to the buffer instance, so that the written object won't\nbe garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readPointer(Number offset, Number size)` → Buffer\n\nReturns a new Buffer instance pointing to the address specified in this Buffer at\nthe given offset. The `size` is the length of the returned Buffer, which defaults\nto 0.\n\n---\n\n#### `Buffer#writePointer(Buffer pointer, Number offset)` → undefined\n\nWrites the given Buffer's memory address to this Buffer at the given offset. Make\nsure that at least `ref.sizeof.pointer` bytes are available in the Buffer after\nthe specified offset. The Buffer can later be retrieved again using\n`readPointer()`.\n\n`pointer` gets \"attached\" to the buffer instance, so that the written pointer\nwon't be garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readCString(Number offset)` → String\n\nReturns a JS String from read from the Buffer at the given offset. The C String is\nread up til the first NULL byte, which indicates the end of the C String.\n\nThis function can read beyond the length of a Buffer, and reads up until the first\nNULL byte regardless.\n\n---\n\n#### `Buffer#writeCString(String string, Number offset, String encoding)` → undefined\n\nWrites `string` as a C String (i.e. NULL terminated) to this Buffer at the given\noffset. `encoding` is optional and defaults to `utf8`.\n\n---\n\n#### `Buffer#readInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#readInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#reinterpret(Number size)` → Buffer\n\nReturns a new Buffer instance with the exact same memory address as the target\nbuffer, only you can specifiy the size of the returned buffer as well.\n\nThe original buffer instance gets \"attached\" to the new buffer instance, so that\nthe original buffer won't be garbage collected until the new buffer does.\n\n__Warning:__ This function is potentially _dangerous_! There are only a small few\nuse-cases where it _really_ needs to be used (i.e. resizing a Buffer returned from\nan FFI'd `malloc()` call), but otherwise, try to avoid it!\n\n\nBuilt-in \"types\"\n----------------\n\n`ref` comes with all the basic fixed-size C types that you are probably familiar with:\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `void`       | A `void` type. Derefs to `null`\n| `int8`       | Signed 8-bit Integer\n| `uint8`      | Unsigned 8-bit Integer\n| `int16`      | Signed 16-bit Integer\n| `uint16`     | Unsigned 16-bit Integer\n| `int32`      | Signed 32-bit Integer\n| `uint32`     | Unsigned 32-bit Integer\n| `int64`      | Signed 64-bit Integer\n| `uint64`     | Unsigned 64-bit Integer\n| `float`      | Single Precision Floating Point Number (float)\n| `double`     | Double Precision Floating Point Number (double)\n| `Object`     | A type capable of reading/writing references to JS objects\n| `CString`    | NULL-terminated String (char *)\n\nIn addition to the basic types, there are type aliases for common C types.\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `bool`       | bool. Returns/accepts JS `true`/`false` values\n| `byte`       | unsigned char\n| `char`       | char\n| `uchar`      | unsigned char\n| `short`      | short\n| `ushort`     | unsigned short\n| `int`        | int\n| `uint`       | unsigned int\n| `long`       | long\n| `ulong`      | unsigned long\n| `longlong`   | long long\n| `ulonglong`  | unsigned long long\n| `size_t`     | platform-dependent, usually pointer size\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"ref@0.0.20","dist":{"shasum":"fc4170519540ab4ebcada34e8c4b330eea27dba7","tarball":"http://registry.npmjs.org/ref/-/ref-0.0.20.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.1.0":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.1.0","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"node docs/compile","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"dox":"*","highlight.js":"1","jade":"*","marked":"*","mocha":"*","weak":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nAdditions to `Buffer.prototype`\n-------------------------------\n\n`ref` extends Node's core `Buffer` instances with some useful additions:\n\n---\n\n#### `Buffer#address()` → Number\n\nReturns the memory address of the Buffer instance.\n\n---\n\n#### `Buffer#isNull()` → Boolean\n\nReturns `true` if the Buffer's memory address is NULL, `false` otherwise.\n\n---\n\n#### `Buffer#ref()` → Buffer\n\nReturns a new Buffer instance that is referencing this Buffer. That is, the new\nBuffer is \"pointer\" sized, and points to the memory address of this Buffer.\n\nThe returned Buffer's `type` property gets set properly as well, with an\n`indirection` level increased by 1.\n\n---\n\n#### `Buffer#deref()` → ???\n\nReturns the dereferenced value from the Buffer instance. This depends on the\n`type` property being set to a proper \"type\" instance (see below).\n\nThe returned value can be another Buffer, or pretty much be anything else,\ndepending on the `get()` function of the \"type\" instance and current\n`indirection` level of the Buffer.\n\n---\n\n#### `Buffer#readObject(Number offset)` → Object\n\nReturns the JS `Object` that has previously been written to the Buffer at the\ngiven offset using `writeObject()`.\n\n---\n\n#### `Buffer#writeObject(Object obj, Number offset)` → undefined\n\nWrites the given JS `Object` to the Buffer at the given offset. Make sure that at\nleast `ref.sizeof.Object` bytes are available in the Buffer after the specified\noffset. The object can later be retrieved using `readObject()`.\n\n`obj` gets \"attached\" to the buffer instance, so that the written object won't\nbe garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readPointer(Number offset, Number size)` → Buffer\n\nReturns a new Buffer instance pointing to the address specified in this Buffer at\nthe given offset. The `size` is the length of the returned Buffer, which defaults\nto 0.\n\n---\n\n#### `Buffer#writePointer(Buffer pointer, Number offset)` → undefined\n\nWrites the given Buffer's memory address to this Buffer at the given offset. Make\nsure that at least `ref.sizeof.pointer` bytes are available in the Buffer after\nthe specified offset. The Buffer can later be retrieved again using\n`readPointer()`.\n\n`pointer` gets \"attached\" to the buffer instance, so that the written pointer\nwon't be garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readCString(Number offset)` → String\n\nReturns a JS String from read from the Buffer at the given offset. The C String is\nread up til the first NULL byte, which indicates the end of the C String.\n\nThis function can read beyond the length of a Buffer, and reads up until the first\nNULL byte regardless.\n\n---\n\n#### `Buffer#writeCString(String string, Number offset, String encoding)` → undefined\n\nWrites `string` as a C String (i.e. NULL terminated) to this Buffer at the given\noffset. `encoding` is optional and defaults to `utf8`.\n\n---\n\n#### `Buffer#readInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#readInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#reinterpret(Number size)` → Buffer\n\nReturns a new Buffer instance with the exact same memory address as the target\nbuffer, only you can specifiy the size of the returned buffer as well.\n\nThe original buffer instance gets \"attached\" to the new buffer instance, so that\nthe original buffer won't be garbage collected until the new buffer does.\n\n__Warning:__ This function is potentially _dangerous_! There are only a small few\nuse-cases where it _really_ needs to be used (i.e. resizing a Buffer returned from\nan FFI'd `malloc()` call), but otherwise, try to avoid it!\n\n\nBuilt-in \"types\"\n----------------\n\n`ref` comes with all the basic fixed-size C types that you are probably familiar with:\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `void`       | A `void` type. Derefs to `null`\n| `int8`       | Signed 8-bit Integer\n| `uint8`      | Unsigned 8-bit Integer\n| `int16`      | Signed 16-bit Integer\n| `uint16`     | Unsigned 16-bit Integer\n| `int32`      | Signed 32-bit Integer\n| `uint32`     | Unsigned 32-bit Integer\n| `int64`      | Signed 64-bit Integer\n| `uint64`     | Unsigned 64-bit Integer\n| `float`      | Single Precision Floating Point Number (float)\n| `double`     | Double Precision Floating Point Number (double)\n| `Object`     | A type capable of reading/writing references to JS objects\n| `CString`    | NULL-terminated String (char *)\n\nIn addition to the basic types, there are type aliases for common C types.\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `bool`       | bool. Returns/accepts JS `true`/`false` values\n| `byte`       | unsigned char\n| `char`       | char\n| `uchar`      | unsigned char\n| `short`      | short\n| `ushort`     | unsigned short\n| `int`        | int\n| `uint`       | unsigned int\n| `long`       | long\n| `ulong`      | unsigned long\n| `longlong`   | long long\n| `ulonglong`  | unsigned long long\n| `size_t`     | platform-dependent, usually pointer size\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\nBuild the docs\n--------------\n\nInstall the dev dependencies\n\n``` bash\n$ npm install\n```\n\nGenerate the docs\n\n``` bash\n$ npm run docs\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"ref@0.1.0","dist":{"shasum":"3fb930e26944017726f9b22152b1d212beff3e4b","tarball":"http://registry.npmjs.org/ref/-/ref-0.1.0.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.1.1":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.1.1","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"node docs/compile","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"dox":"*","highlight.js":"1","jade":"*","marked":"*","mocha":"*","weak":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nAdditions to `Buffer.prototype`\n-------------------------------\n\n`ref` extends Node's core `Buffer` instances with some useful additions:\n\n---\n\n#### `Buffer#address()` → Number\n\nReturns the memory address of the Buffer instance.\n\n---\n\n#### `Buffer#isNull()` → Boolean\n\nReturns `true` if the Buffer's memory address is NULL, `false` otherwise.\n\n---\n\n#### `Buffer#ref()` → Buffer\n\nReturns a new Buffer instance that is referencing this Buffer. That is, the new\nBuffer is \"pointer\" sized, and points to the memory address of this Buffer.\n\nThe returned Buffer's `type` property gets set properly as well, with an\n`indirection` level increased by 1.\n\n---\n\n#### `Buffer#deref()` → ???\n\nReturns the dereferenced value from the Buffer instance. This depends on the\n`type` property being set to a proper \"type\" instance (see below).\n\nThe returned value can be another Buffer, or pretty much be anything else,\ndepending on the `get()` function of the \"type\" instance and current\n`indirection` level of the Buffer.\n\n---\n\n#### `Buffer#readObject(Number offset)` → Object\n\nReturns the JS `Object` that has previously been written to the Buffer at the\ngiven offset using `writeObject()`.\n\n---\n\n#### `Buffer#writeObject(Object obj, Number offset)` → undefined\n\nWrites the given JS `Object` to the Buffer at the given offset. Make sure that at\nleast `ref.sizeof.Object` bytes are available in the Buffer after the specified\noffset. The object can later be retrieved using `readObject()`.\n\n`obj` gets \"attached\" to the buffer instance, so that the written object won't\nbe garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readPointer(Number offset, Number size)` → Buffer\n\nReturns a new Buffer instance pointing to the address specified in this Buffer at\nthe given offset. The `size` is the length of the returned Buffer, which defaults\nto 0.\n\n---\n\n#### `Buffer#writePointer(Buffer pointer, Number offset)` → undefined\n\nWrites the given Buffer's memory address to this Buffer at the given offset. Make\nsure that at least `ref.sizeof.pointer` bytes are available in the Buffer after\nthe specified offset. The Buffer can later be retrieved again using\n`readPointer()`.\n\n`pointer` gets \"attached\" to the buffer instance, so that the written pointer\nwon't be garbage collected until the target buffer does.\n\n---\n\n#### `Buffer#readCString(Number offset)` → String\n\nReturns a JS String from read from the Buffer at the given offset. The C String is\nread up til the first NULL byte, which indicates the end of the C String.\n\nThis function can read beyond the length of a Buffer, and reads up until the first\nNULL byte regardless.\n\n---\n\n#### `Buffer#writeCString(String string, Number offset, String encoding)` → undefined\n\nWrites `string` as a C String (i.e. NULL terminated) to this Buffer at the given\noffset. `encoding` is optional and defaults to `utf8`.\n\n---\n\n#### `Buffer#readInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64LE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64LE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#readInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit int read from this Buffer\nat the given offset. If the returned value will fit inside a Number without losing\nprecision, then a Number is returned, otherwise a String is returned.\n\n---\n\n#### `Buffer#writeInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit int value. Ensure that at\nleast `ref.sizeof.int64` (always 8) bytes are available in the Buffer after the\ngiven offset.\n\n---\n\n#### `Buffer#readUInt64BE(Number offset)` → Number|String\n\nReturns a Number or String representation of the 64-bit unsigned int read from\nthis Buffer at the given offset. If the returned value will fit inside a\nNumber without losing precision, then a Number is returned, otherwise a String\nis returned.\n\n---\n\n#### `Buffer#writeUInt64BE(Number|String value, Number offset)` → undefined\n\nWrites an value as a `int64_t` to this Buffer at the given offset. `value` may be\neither a Number or a String representing the 64-bit unsigned int value. Ensure\nthat at least `ref.sizeof.uint64` (always 8) bytes are available in the Buffer\nafter the given offset.\n\n---\n\n#### `Buffer#reinterpret(Number size)` → Buffer\n\nReturns a new Buffer instance with the exact same memory address as the target\nbuffer, only you can specifiy the size of the returned buffer as well.\n\nThe original buffer instance gets \"attached\" to the new buffer instance, so that\nthe original buffer won't be garbage collected until the new buffer does.\n\n__Warning:__ This function is potentially _dangerous_! There are only a small few\nuse-cases where it _really_ needs to be used (i.e. resizing a Buffer returned from\nan FFI'd `malloc()` call), but otherwise, try to avoid it!\n\n\nBuilt-in \"types\"\n----------------\n\n`ref` comes with all the basic fixed-size C types that you are probably familiar with:\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `void`       | A `void` type. Derefs to `null`\n| `int8`       | Signed 8-bit Integer\n| `uint8`      | Unsigned 8-bit Integer\n| `int16`      | Signed 16-bit Integer\n| `uint16`     | Unsigned 16-bit Integer\n| `int32`      | Signed 32-bit Integer\n| `uint32`     | Unsigned 32-bit Integer\n| `int64`      | Signed 64-bit Integer\n| `uint64`     | Unsigned 64-bit Integer\n| `float`      | Single Precision Floating Point Number (float)\n| `double`     | Double Precision Floating Point Number (double)\n| `Object`     | A type capable of reading/writing references to JS objects\n| `CString`    | NULL-terminated String (char *)\n\nIn addition to the basic types, there are type aliases for common C types.\n\n| **Name**     | **Description**\n|:-------------|:-----------------------------------------------------\n| `bool`       | bool. Returns/accepts JS `true`/`false` values\n| `byte`       | unsigned char\n| `char`       | char\n| `uchar`      | unsigned char\n| `short`      | short\n| `ushort`     | unsigned short\n| `int`        | int\n| `uint`       | unsigned int\n| `long`       | long\n| `ulong`      | unsigned long\n| `longlong`   | long long\n| `ulonglong`  | unsigned long long\n| `size_t`     | platform-dependent, usually pointer size\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\nBuild the docs\n--------------\n\nInstall the dev dependencies\n\n``` bash\n$ npm install\n```\n\nGenerate the docs\n\n``` bash\n$ npm run docs\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","_id":"ref@0.1.1","dist":{"shasum":"6256c47b0271a7702fbb8cdc280e9d01fbca11fa","tarball":"http://registry.npmjs.org/ref/-/ref-0.1.1.tgz"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.1.2":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.1.2","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"node docs/compile","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"dox":"*","highlight.js":"1","jade":"*","marked":"*","mocha":"*","weak":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\nSee the [full API Docs][docs] for more examples.\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\nBuild the docs\n--------------\n\nInstall the dev dependencies:\n\n``` bash\n$ npm install\n```\n\nGenerate the docs:\n\n``` bash\n$ npm run docs\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[docs]: http://tootallnate.github.com/ref\n","_id":"ref@0.1.2","dist":{"shasum":"4b9c8cda9f83016f06eca3b0f56572e97045c11b","tarball":"http://registry.npmjs.org/ref/-/ref-0.1.2.tgz"},"_npmVersion":"1.1.57","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.1.3":{"name":"ref","description":"Turn Buffer instances into \"pointers\"","keywords":["native","buffer","extensions","c++","pointer","reference","dereference","type","int","long","float","double","byte","64"],"version":"0.1.3","author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"main":"./lib/ref.js","scripts":{"docs":"node docs/compile","test":"mocha -gc --reporter spec","install":"node-gyp rebuild"},"dependencies":{"bindings":"*","debug":"*"},"devDependencies":{"dox":"*","highlight.js":"1","jade":"*","marked":"*","mocha":"*","weak":"*"},"engines":{"node":"*"},"gypfile":true,"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n[![Build Status](https://secure.travis-ci.org/TooTallNate/ref.png)](http://travis-ci.org/TooTallNate/ref)\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### referencing and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\nSee the [full API Docs][docs] for more examples.\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n| **Name**      | **Data Type**                    | **Description**\n|:--------------|:---------------------------------|:----------------------------------\n| `size`        | Number                           | The size in bytes required to hold this type.\n| `indirection` | Number                           | The current level of indirection of the buffer. Usually this would be _1_, and gets incremented on Buffers from `ref()` calls. A value of less than or equal to _0_ is invalid.\n| `get`         | Function (buffer, offset)        | The function to invoke when dereferencing this type when the indirection level is _1_.\n| `set`         | Function (buffer, offset, value) | The function to invoke when setting a value to a buffer instance.\n| `name`        | String                           | _(optional)_ The name to use during debugging for this type.\n| `alignment`   | Number                           | _(optional)_ The alignment of this type when placed in a struct. Defaults to the type's `size`.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\nBuild the docs\n--------------\n\nInstall the dev dependencies:\n\n``` bash\n$ npm install\n```\n\nGenerate the docs:\n\n``` bash\n$ npm run docs\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[docs]: http://tootallnate.github.com/ref\n","_id":"ref@0.1.3","dist":{"shasum":"ad268e2e393aa02b89cba655aca6d2c506743faa","tarball":"http://registry.npmjs.org/ref/-/ref-0.1.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}}},"readme":"ref\n===\n### Turn Buffer instances into \"pointers\"\n\n\nThis module is inspired by the old `Pointer` class from node-ffi, but with the\nintent of using Node's fast `Buffer` instances instead of a slow C++ `Pointer`\nclass. These two concepts were previously very similar, but now this module\nbrings over the functionality that Pointers had and Buffers are missing, so\nnow Buffers are a lot more powerful.\n\n#### Features:\n\n * Get the memory address of any `Buffer` instance\n * Read/write references to JavaScript Objects into `Buffer` instances\n * Read/write `Buffer` instances' memory addresses to other `Buffer` instances\n * Read/write `int64_t` and `uint64_t` data values (Numbers or Strings)\n * A \"type\" convention, so that you can specify a buffer as an `int *`,\n   and reference/dereference at will.\n * Offers a buffer instance representing the `NULL` pointer\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ref\n```\n\n\nExamples\n--------\n\n#### references and derefencing\n\n``` js\nvar ref = require('ref')\n\n// so we can all agree that a buffer with the int value written\n// to it could be represented as an \"int *\"\nvar buf = new Buffer(4)\nbuf.writeInt32LE(12345, 0)\n\n// first, what is the memory address of the buffer?\nconsole.log(buf.address())  // ← 140362165284824\n\n// using `ref`, you can set the \"type\", and gain magic abilities!\nbuf.type = ref.types.int32\n\n// now we can dereference to get the \"meaningful\" value\nconsole.log(buf.deref())  // ← 12345\n\n\n// you can also get references to the original buffer if you need it.\n// this buffer could be thought of as an \"int **\"\nvar one = buf.ref()\n\n// and you can dereference all the way back down to an int\nconsole.log(one.deref().deref())  // ← 12345\n```\n\n\nThe \"type\" interface\n--------------------\n\nYou can easily define your own \"type\" objects at attach to `Buffer` instances.\nIt just needs to be a regular JavaScript Object that contains the following\nproperties:\n\n  * `size` - Number - The size in bytes required to hold this type\n  * `indirection` - Number - The current level of indirection of the buffer.\n    Usually this would be _1_, and gets incremented on Buffers from `ref()` calls.\n    A value of less than or equal to _0_ is invalid.\n  * `get` - Function (buffer, offset) - the function to invoke when dereferencing\n    this type when the indirection level is _1_.\n  * `set` - Function (buffer, offset, value) - the function to invoke when\n    setting a value to a buffer instance.\n\nFor example, you could define a \"bigint\" type that dereferences into a\n[`bigint`](https://github.com/substack/node-bigint) instance:\n\n``` js\nvar ref = require('ref')\nvar bigint = require('bigint')\n\n// define the \"type\" instance according to the spec\nvar BigintType = {\n    size: ref.sizeof.int64\n  , indirection: 1\n  , get: function (buffer, offset) {\n      // return a bigint instance from the buffer\n      return bigint.fromBuffer(buffer)\n    }\n  , set: function (buffer, offset, value) {\n      // 'value' would be a bigint instance\n      var val = value.toString()\n      return ref.writeInt64(buffer, offset || 0, val)\n    }\n}\n\n// now we can create instances of the type from existing buffers.\n// \"buf\" is some Buffer instance returned from some external data\n// source, which should contain \"bigint\" binary data.\nbuf.type = BigintType\n\n// and now you can create \"bigint\" instances using this generic \"types\" API\nvar val = buf.deref()\n            .add('1234')\n            .sqrt()\n            .shiftLeft(5)\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"time":{"0.0.1":"2012-05-05T04:28:01.070Z","0.0.2":"2012-05-05T19:26:46.224Z","0.0.3":"2012-05-08T18:29:00.906Z","0.0.4":"2012-05-08T19:01:38.249Z","0.0.5":"2012-05-09T20:50:59.559Z","0.0.6":"2012-05-10T00:31:48.283Z","0.0.7":"2012-05-10T01:56:26.816Z","0.0.8":"2012-05-12T17:23:16.204Z","0.0.9":"2012-05-13T22:53:27.558Z","0.0.10":"2012-05-15T21:51:22.751Z","0.0.11":"2012-05-18T03:03:58.301Z","0.0.12":"2012-05-30T22:46:15.807Z","0.0.13":"2012-05-31T04:57:56.867Z","0.0.14":"2012-05-31T22:17:59.305Z","0.0.15":"2012-05-31T22:40:28.794Z","0.0.16":"2012-06-01T17:24:52.456Z","0.0.17":"2012-06-06T00:26:54.996Z","0.0.18":"2012-06-21T22:11:44.319Z","0.0.19":"2012-06-25T19:06:28.920Z","0.0.20":"2012-06-28T01:13:45.297Z","0.1.0":"2012-07-22T17:40:02.609Z","0.1.1":"2012-08-03T18:29:24.593Z","0.1.2":"2012-09-02T20:03:15.171Z","0.1.3":"2012-09-25T23:46:38.594Z"},"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://tootallnate.net"},"repository":{"type":"git","url":"git://github.com/TooTallNate/ref.git"},"_etag":"\"C72MI4S3GWV2LBPDKATM8OUA0\""}