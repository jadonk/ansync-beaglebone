var current_timeout,
    sqrt3 = Math.sqrt(3);
var max_val_dc = (sqrt3 + 3) / (2); //compute once

/******************** ------ Functions ********************/
function startMotors(robot, data, response) {
    var X, Y, R, time, speed,
        m = [], error = false;

    //parse object...
    X     = parseFloat(data.X);
    Y     = parseFloat(data.Y);
    R     = parseFloat(data.R);
    time  = data.time;
    speed = data.speed;

    //validate input
    error = validateInput([X, Y, R], time, speed);
    if (error) {
        console.error(error);
        return error;
    }
    if (X || Y || R) { //at least some direction...
        m[0] = (-1 / 2) * X - Y * max_val_dc + R; //"top left" motor  - 60deg to x-axis
        m[1] = (-1 / 2) * X + Y * max_val_dc + R; //"top right" motor - -60deg to x-axis
        m[2] = X + R;                             //"bottom" motor - parallel with x-axis

        //clear existing stop timeout - would cause this movement to prematurely stop
        clearTimeout(current_timeout);

        console.log('startin\' motors');
        error = startAnsyncMotors(robot, m, speed);
        if (error) {
            return error;
        }
    }

    current_timeout = setTimeout(function(response) {
        //console.log('stopping motors on timeout...');
        response.send({error: stopAnsyncMotors(robot)});
    }, time, response);

    return error;
}

function stopMotors(robot) {
    console.log('stoppin\' motors');
    return startAnsyncMotors(robot, [0,0,0], 0);
}

/******************** Ansync Functions ********************/
function startAnsyncMotors(robot, m, speed) {
    var error, i, devices = robot.devices;

    for (i = 0; i < devices.length; i += 1) {
        error = devices[i].setChannel(1, translateToDutyCycle(m[i], speed, i));

        if (error < 0) {
            error = "Error setting PWM: board " + (i + 1);
            console.error(error);
            return error;
        }
    }
    return false;
}

/******************** Helper Functions ********************/
function translateToDutyCycle(value, speed, num) {
    if (num === 2) {
        return (value / 2) * (speed / 100);
    }
    return (value / max_val_dc) * (speed / 100);
}

function validateInput(move_array, time, speed) {
    var i, temp, abs = Math.abs;
    for (i = 0; i < move_array.length; i += 1) {
        if (abs(temp) > 1) {
            console.error(move_array);
            return "Bad directions!";
        }
    }

    if (speed > 100 || speed < 0) {
        return "Speed invalid!";
    }

    // Time okay, negative values for setTimeout give a minimum 1ms
    return false;
}
/**********************************************************/

exports.startMotors = startMotors;
exports.stopMotors  = stopMotors;
