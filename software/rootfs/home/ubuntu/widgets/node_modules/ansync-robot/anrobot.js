var current_timeout,
    resp,
    motorsLocked = false;
    running = false,
    sqrt3 = Math.sqrt(3),
    max_val_dc = (sqrt3 + 3) / (2),
    max_yval = sqrt3 / 2; //compute once

/******************** ------ Functions ********************/
function startMotors(robot, data) {
    var X, Y, R, speed,
        m = [], error = false;

//    if (robot.motorsLocked === false) {
        //parse object...
        X     = parseFloat(data.dx)/100;
        Y     = parseFloat(data.dy)/100;
        R     = parseFloat(data.rotation)/100;
         speed = 100;

        //validate input
        //error = validateInput([X, Y, R], time, speed);
        //if (error) {
            //console.error(error);
            //return error;
        //}
        if (X || Y || R) { //at least some direction...
            m[0] = (-1 / 2) * X - Y * max_yval + R; //"top left" motor  - 60deg to x-axis
            m[1] = (-1 / 2) * X + Y * max_yval + R; //"top right" motor - -60deg to x-axis
            m[2] = X + R;                             //"bottom" motor - parallel with x-axis

            //also send http response
            process.stdout.write((running)?"running motors...\n":"starting motors...\n");
            error = startAnsyncMotors(robot, m, speed);

            if (error) {
                return error;
            }
        }
//    }
}

function stopMotors(robot) {
    console.log('stopping motors.');
    var foo = startAnsyncMotors(robot, [0,0,0], 0);
    running = false;
    return foo;
}

/******************** Ansync Functions ********************/
function startAnsyncMotors(robot, m, speed) {
    var error = 0,
        motors = robot.motors;

    for (var i = 0; i < motors.length; i++) {
        motors[i].setOutputs(1, 1, translateToDutyCycle(m[i], speed, i), function(err) {
            if (err) {
                console.error("Error setting PWM: board " + (i + 1) + ": " + err);
                return err;
            }
        });
        /*
        if (!(motors[i] instanceof Error)) {
            error = motors[i].setChannel(1, translateToDutyCycle(m[i], speed, i));
        }

        if (error < 0) {
            error = "Error setting PWM: board " + (i + 1);
            console.error(error);
            return error;
        }
        */
    }
    running = true;
    return false;
}

/******************** Helper Functions ********************/
function translateToDutyCycle(value, speed, num) {
    if (num === 2) {
        return (100 * (value / 2) * (speed / 100)).toFixed(0);
    }
    return (100 * ((value / max_val_dc) * (speed / 100))).toFixed(0);
}

function validateInput(move_array, time, speed) {
    var i, temp, abs = Math.abs;
    for (i = 0; i < move_array.length; i += 1) {
        if (abs(temp) > 1) {
            console.error(move_array);
            return "Bad directions!";
        }
    }

    if (speed > 100 || speed < 0) {
        return "Speed invalid!";
    }

    // Time okay, negative values for setTimeout give a minimum 1ms
    return false;
}
/**********************************************************/

function lockMotors(robot) {
    robot.motorsLocked = true;
    stopMotors(robot);
    process.stdout.write("Locked\n");
}

function unlockMotors(robot) {
    robot.motorsLocked = false;
    process.stdout.write("Unlocked\n");
}

exports.lockMotors = lockMotors;
exports.unlockMotors = unlockMotors;
exports.startMotors = startMotors;
exports.stopMotors  = stopMotors;
