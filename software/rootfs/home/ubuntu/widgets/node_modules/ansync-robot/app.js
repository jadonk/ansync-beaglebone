var anrobot  = require('./anrobot'),
    net      = require('net'),
    spawn    = require('child_process').spawn,
    robots   = require('./robots.json');

var dummyPayload = {};
/*
var blobDetect = spawn('/home/ubuntu/uncanny/blobdetect/bin/blobdetect');

blobDetect.stdout.on("data", function(data) {
    console.log(">>> " + data);
});

blobDetect.stderr.setEncoding("utf8");
blobDetect.stderr.on("data", function(data) {
    console.log("!!! " + data);
    if(/^execvp\(\)/.test(data)) {
        console.log("Failed to start");
    }
});

blobDetect.on("close", function(code, signal) {
    console.log("blob Closed with code " + code + " and signal " + signal);
});
*/
function link(app, express) {
    var robot, robot_name;

    dummyPayload.dx = 0;
    dummyPayload.dy = 0;
    dummyPayload.up = 0;
    dummyPayload.down = 0;
    dummyPayload.left = 0;
    dummyPayload.right = 0;
    dummyPayload.rotation = 0;

    for (robot_name in robots) {
        if (robots.hasOwnProperty(robot_name)) {
            robot = robots[robot_name];
            initHttpHandlers(app, express, robot_name, robot.page_title);
        }
    }
/*
    var client = net.connect("/tmp/robosckt");
    client.on("data", function(data) {
        move(data.readInt8(0), data.readInt8(1));
    });
    client.on("error", function(err) {
        console.log("Blobdetect error: " + err);
        blobDetect.kill('SIGINT');
    });
*/
    return robots;
}

// HTTP request handlers
function initHttpHandlers(app, express, robot_name, page_title) {
    var url = "/" + robot_name;
	var timeoutId;

    app.use(url, express.static(__dirname + '/public'));

    app.get(url, function (req, res) {
        res.render(__dirname + '/public/jade/layout', {title: page_title});
    });

    app.post(url + '/move', function (req, res) {
		  var payload = req.body;
		  var cmd = (payload.dx == 0 && payload.dy == 0 && payload.rotation == 0)? 'stop': 'move';

        var error;
		  res.send(200);

        //if (error = isBadJSON(req.body)) {
            //console.log('Bad request!');
            //console.log(error);

            //res.send(400);
            //return;
        //}

        switch (cmd) {
        case 'move':
		clearTimeout(timeoutId); // don't stop if still getting move commands
            error = anrobot.startMotors(robots[robot_name], payload, res);
		timeoutId = setTimeout(anrobot.stopMotors, 300, robots[robot_name]); //stop after 300ms
            if (error) {
                //if error, send complete response back immediately as timeout
                //will never be called
            }
            break;
        case 'stop':
            error = anrobot.stopMotors(robots[robot_name]);
            break;
        }
    });
}

/******************** Helper Functions ********************/
function isBadJSON(obj) {

    if (obj === undefined) {
        return "obj undefined";
    }

    if (obj.cmd === undefined) {
        return "cmd undefined";
    }

    if (obj.data === undefined) {
        return "data undefined!";
    }

    obj = obj.data;

    if (obj.X === undefined || obj.Y === undefined ||
        obj.R === undefined || obj.speed === undefined ||
        obj.time === undefined) {
        return 'property of data undefined';
    }
    return false;
}

function move(rotation, area) {
    dummyPayload.rotation = -rotation;
    dummyPayload.dx = 0;
    dummyPayload.dy = -area;

    console.log("R = " + rotation + " A = " + area);
    error = anrobot.startMotors(robots["robot1"], dummyPayload);
    if (error) {
        anrobot.stopMotors(robots["robot1"]);
    }
}

function close() {
    console.log("Closing...");
    anrobot.stopMotors(robots["robot1"]);
    blobDetect.kill('SIGINT');
}

function initSensors(robot) {
    /*
    var bumper;

    bumper = robot.sensors["bumper"];
    bumper.startAgent(1, 0, 1000);

    bumper.on("data", function(data) {
        if ((data & 0x0007) > 0) {
            anrobot.lockMotors(robot);
        } else {
            anrobot.unlockMotors(robot);
        }
    });

    bumper.on("error", function(error) {
        console.log("Bumper error: " + error + "!!");
    })
    */
}

exports.initSensors = initSensors;
exports.close = close;
exports.link = link;
