var assert = require('assert');
var common = require('./common.js');

var addon = require('../index.js');

describe('AN2024', function() {
	// var dev = new addon.open('usb:CLASS_AN2024');
	before(function() {
		this.dev = addon.open('usb:CLASS_AN2024'); 
	});
	after(function() {
		this.dev.close();
	});
	describe('#startAgent', function() {
		it('should begin returning data', function(done) {
			var self = this;
			this.dev.on('error', done);

			var count = 0;
			this.dev.on('data', function(data) {
				if (++count > 5) { 
					self.dev.stopAgent();
					assert(data, 'Data should be defined.');
					done();
				}
			});
			this.dev.startAgent(1, 4, 100);
		});
	});
	describe('#setProperty()', function() {
		it('should set the offset property', function(done) {
			this.dev.setProperty(2, 1, 1, 0xFFFF, done);
		});

		it('should set the fullscale property', function(done) {
			this.dev.setProperty(2, 1, 2, 0xFFFF, done);
		});
	});
	// 	it('should return an error', function(done) {
	// 		this.dev.requestProperty(0, 99, 0, function(err, data) {
	// 			check( done, function() {
	// 				assert(err, "Error should be set.");
	// 				assert(!data, "Data should be undefined on error condition.");
	// 			});
	// 		});
	// 	});
	// });

	describe('#getInputs()', function() {
		// Test getting the DAC value
		common.channels(1, 1, 1, addon.prototype.getInputs);

		// Test getting AIN1-4
		common.channels(1, 4, 2, addon.prototype.getInputs);

		it('should return an error', function(done) {
			this.dev.getInputs(0, 99, common.invert(done));
		});
	});
	
	describe('#setOutputs()', function() {
		it('should set the outputs correctly', function(done) {
			this.dev.setOutputs(1, 1, 0xFFFF, done);
		});
		it('should return an error', function(done) {
			this.dev.setOutputs(2, 1, 0xFFFF, common.invert(done));
		});
	});
});