var assert = require('assert');
var common = require('./common');

function check(done, fn) {
	try {
		fn();
		done();
	} catch (e) {
		done(e);
	}
}
var addon = require('../index.js');

describe('DUMMY', function() {
	before(function() {
		this.dev = addon.open('dummy:dummy'); 
	});
	after(function() {
		this.dev.close();
	});
	describe('#setProperty()', function() {
		it('should set property', function(done) {
			this.dev.setProperty(0, 0, 9, 0x0000, done);
		});
		it('should return an error', function(done) {
			this.dev.requestProperty(0, 99, 0, function(err, data) {
				check( done, function() {
					assert(err, "Error should be set.");
					assert(!data, "Data should be undefined on error condition.");
				});
			});
		});
		common.channels(1, 4, 1 /*group*/, 2 /*property*/, 69 /*value*/, addon.prototype.setProperty);
	});

	describe('#getInputs()', function() {
		it('should return the inputs', function(done) {
			this.dev.getInputs(0, 0, done);
		});
		it('should return an error', function(done) {
			this.dev.getInputs(0, 99, function(err, data) {
				check( done, function() {
					assert(err, "Error should be set.");
					assert(!data, "Data should be undefined on error condition.");
				});
			});
		});
	});
	
	describe('#setOutputs()', function() {
		it('should set the outputs correctly', function(done) {
			var self = this;
			this.dev.setProperty(0, 0, 9, 0x0000, function(err, data) {
				if (err) done(err);

				self.dev.setOutputs(0, 0, 0xBEEF, function(err) {
					if (err) return done(err);
					
					self.dev.getInputs(0, 0, function(err, data) {
						check( done, function() {
							if (err) done(err);

							assert.equal(data, 0xBEEF);
						});
					});
				});
			});
		});
	});
});