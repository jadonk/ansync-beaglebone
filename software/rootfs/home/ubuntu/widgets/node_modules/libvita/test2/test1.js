var tester = require('../tester')
	,addon = tester.addon;

var test1Num = 30;

var test1 = {
	channel: 1,
	group: 1,
	name: 'AN2015->AN2003 Timing Test',
	description: 'This test toggles one channel on the 2015 and reads it on the 2003.  Runs several tests.  Measures the timing of output change and agent callbacks.',
	init: function(callback) {
		addon.open('usb:CLASS_AN2003/88888888', function(err, result) {
			if (err) console.log('Error:an2003 failed to open, ' + err);
			else an2003 = result;
			addon.open('usb:CLASS_AN2015/77777777', function(err, result) {
				if (err) console.log('Error:an2015 failed to open, ' + err);
				else an2015 = result;
				callback(null);
			});
		});
	},
	close: function(callback) {
		if (an2003) an2003.close();
		if (an2015) an2015.close();
		return callback(null);
	},
	run: function(callback) {
		var agentCount = 0
			,self = this
			,sender = an2003
			,receiver = an2015
			,currentOutput
			,startTimeChange
			,startTimeCallback
			,index = 0
			,testRuns = test1Num
			,outputArr = []
			,changeResults = []
			,agentResults = [];

		console.log('running test1');
		for (var i = 0; i < testRuns; i++) {
			currentOutput = currentOutput? 0: 1;
			outputArr.push(currentOutput);
		}
		currentOutput = outputArr[index++];

		// set direction to in
		an2003.setProperty(self.group, 0, 1, 0xffff, function(err) {
			if (err) return callback('Error: cant set property on 2003, ' + err);

			an2015.setOutputs(self.group, self.channel, currentOutput, function(err) {
				if (err) return callback("Error: failed to set output on 2015, " + err);
				self.append('set ' + currentOutput);

				startTimeChange = process.hrtime();
				startTimeCallback = process.hrtime();

				an2003.startAgent(self.group, self.channel, 5, function(err, data, agentId) {
					if (err) return callback("Error: agent on 2003, " + err);

					if (index == testRuns + 1) { //stop condition
						an2003.stopAgent(agentId);
						self.append('****************Stopped Agent 1*******************');
						var average = self.averageArr(changeResults);
						self.append("Agent1 timing data: " + changeResults);
						self.append("Agent1 callback times: " + agentResults);
						self.append("\tnumber of times agent1 ran: " + agentCount);
						self.append("\tnumber of changes: " + testRuns);
						self.appendResults("Agent1 average change time: " + average + " ms");
						self.appendResults("Agent1 average callback time: " + self.averageArr(agentResults) + " ms");

						return callback(null, self);

					} else { // iterate
						var agentTime = process.hrtime(startTimeCallback);
						startTimeCallback = process.hrtime();
						agentResults.push(self.toMs(agentTime));

						self.append("\tAgent 1 data: " + data);
						agentCount++;

						if (currentOutput == data) { // output changed
							var finishTime = process.hrtime(startTimeChange);
							self.append('changed ' + data);
							changeResults.push(self.toMs(finishTime));

							currentOutput = outputArr[index++];
							an2015.setOutputs(self.group, self.channel, currentOutput, function(err) {
								if (err) return callback("Error: failed to set output on 2015, " + err);
								startTimeChange = process.hrtime();
								if (index < testRuns + 1) self.append('set ' + currentOutput);
							});
						}
					}
				});
			});
		});
	}
};

//exports.test1 = test1;
