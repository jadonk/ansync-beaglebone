var tester = require('../tester')
	,addon = tester.addon;

var testNum = 18
	,voltMargin = .11
	,dacMargin = .03;

var test4 = {
	name: 'AN2012->AN2016 Timing Test',
	description: 'This test sets a voltage on one of the DACs on 2012 and reads it on one of the ADC channels of 2016.  Runs several tests from .7V to 2.5V.  Measures the timing of output change and agent callbacks.',
	//sync: 'test2', // run after test2 instead of asynchronously
	init: function(callback) {
		addon.open('usb:CLASS_AN2012/66666666', function(err, result) {
			if (err) console.log('Error:an2012 failed to open, ' + err);
			else an2012 = result;
			addon.open('usb:CLASS_AN2016/00108158', function(err, result) {
				if (err) console.log('Error:an2016 failed to open, ' + err);
				else an2016 = result;
				callback(null);
			});
		});
	},
	close: function(callback) {
		if (an2012) an2012.close();
		if (an2016) an2016.close();
		return callback(null);
	},
	run: function(callback) {
		var outputArr = []
			,index = 0
			,changeResults = []
			,agentResults = []
			,agentCount = 0
			,sender = an2012
			,getter = an2016
			,senderGroup = 1
			,senderChannel = 2
			,getterGroup = 1
			,getterChannel = 5
			,currentOutput
			,startTimeChange
			,startTimeCallback
			,self = this
			,oldV = -1
			,testRuns = testNum;

		console.log('running test4');
		for (var i = 0; i < testRuns; i++) {
			outputArr.push(i * 100 + 700);
		}
		currentOutput = outputArr[index++];

		sender.setOutputs(senderGroup, senderChannel, currentOutput, function(err) {
			if (err) return callback("Error: setting outputs on 2016, " + err);

			startTimeChange = process.hrtime();
			startTimeCallback = process.hrtime();
			self.append('set voltage ' + currentOutput);

			getter.startAgent(getterGroup, getterChannel, 10, function(err, data, agentId) {
				if (err) console.log("Error: agent on 2016, " + err);

				else if (index == testRuns + 1) {// stop condition
					getter.stopAgent(agentId);
					var average = self.averageArr(changeResults);
					self.append('****************Stopped Agent 3*******************');
					self.append("agent3 change data: " + changeResults);
					self.append("agent3 callback data: " + agentResults);
					self.append("\tagent3 count: " + agentCount);
					self.append("\tagent3 changes: " + testRuns);
					self.appendResults("Agent3 average change time: " + average + " ms");
					self.appendResults("Agent3 average callback time: " + self.averageArr(agentResults) + " ms");
					console.log('stopped test4');
					return callback(null, self);
				} else { //iterate
					var agentTime = process.hrtime(startTimeCallback);
					startTimeCallback = process.hrtime();
					agentResults.push(self.toMs(agentTime));

					self.append("\tAgent 3 data: " + data);
					agentCount++;

					if (self.inRange(data, currentOutput, voltMargin) && data != oldV) {//output changed
						var finishTime = self.toMs(process.hrtime(startTimeChange));
						changeResults.push(finishTime);
						self.append('got voltage: ' + data);

						oldV = data;
						currentOutput = outputArr[index++];
						sender.setOutputs(senderGroup, senderChannel, currentOutput, function(err) {
							if (err) return callback("Error: setting outputs on 2016, " + err);
							startTimeChange = process.hrtime();
							if (index < testRuns + 1) self.append('set voltage ' + currentOutput);
						});
					}
				}
			});
		});
	}
};

exports.test4 = test4;
