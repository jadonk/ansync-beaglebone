var tester = require('../tester')
	,addon = tester.addon;

var test2Num = 18
	,timeout = 10
	,voltMargin = .11
	,dacMargin = .03;

var test2 = {
	name: 'AN2024 Timing Test',
	description: 'This test sets a voltage on the DAC and reads it on one of the ADC channels of same board.  Runs several tests from .7V to 2.5V.  Measures the timing of output change and agent callbacks.',
	init: function(callback) {
		addon.open('usb:CLASS_AN2024/00108158', function(err, result) {
			if (err) console.log('Error:an2024 failed to open, ' + err);
			else an2024 = result;
			callback(null);
		});
	},
	close: function(callback) {
		if (an2024) an2024.close();
		return callback(null);
	},
	run: function(callback) {
		var outputArr = []
			,index = 0
			,waited = 0
			,changeResults = []
			,agentResults = []
			,agentCount = 0
			,currentOutput
			,startTimeChange
			,startTimeCallback
			,self = this
			,testRuns = test2Num;

		console.log('running test2');
		for (var i = 0; i < testRuns; i++) {
			outputArr.push(i * 100 + 700);
		}
		currentOutput = outputArr[index++];

		an2024.setOutputs(1, 1, currentOutput, function(err) {
			if (err) return callback("Error: setting outputs on 2024, " + err);

			startTimeChange = process.hrtime();
			startTimeCallback = process.hrtime();
			self.append('set voltage ' + currentOutput);

			an2024.startAgent(2, 4, 10, function(err, data, agentId) {
				if (err) console.log("Error: agent on 2024, " + err);

				else if (index == testRuns + 1) {// stop condition
					an2024.stopAgent(agentId);
					var average = self.averageArr(changeResults);
					self.append('****************Stopped Agent 2*******************');
					self.append("agent2 change data: " + changeResults);
					self.append("agent2 callback data: " + agentResults);
					self.append("\tagent2 count: " + agentCount);
					self.append("\tagent2 changes: " + testRuns);
					self.appendResults("Agent2 average change time: " + average + " ms");
					self.appendResults("Agent2 average callback time: " + self.averageArr(agentResults) + " ms");
					console.log('stopped test2');
					return callback(null, self);
				} else { //iterate
					var agentTime = process.hrtime(startTimeCallback);
					startTimeCallback = process.hrtime();
					agentResults.push(self.toMs(agentTime));

					self.append("\tAgent 2 data: " + data);
					agentCount++;

					if (waited++ > timeout) data = currentOutput;

					if (self.inRange(data, currentOutput, dacMargin)) {//output changed
						var finishTime = self.toMs(process.hrtime(startTimeChange));
						changeResults.push(finishTime);
						self.append('got voltage: ' + data);
						waited = 0;

						currentOutput = outputArr[index++];
						an2024.setOutputs(1, 1, currentOutput, function(err) {
							if (err) return callback("Error: setting outputs on 2024, " + err);
							startTimeChange = process.hrtime();
							if (index < testRuns + 1) self.append('set voltage ' + currentOutput);
						});
					}
				}
			});
		});
	}
};

exports.test2 = test2;
