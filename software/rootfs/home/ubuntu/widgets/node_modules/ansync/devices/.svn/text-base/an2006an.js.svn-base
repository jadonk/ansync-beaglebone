var util   = require("util"),
    device = require("./basedevice");

function AN2006AN(serial, alias, logger) {
    AN2006AN.super_.call(this,
                       serial,   // Serial number, from args if provided
                       alias,    // Device alias, from args if provided
                       "AN2006AN", // Model number
                       1,        // Minimum channel, as seen from userspace
                       16,       // Maximum channel, as seen from userspace
                       logger);  // Logger (singleton), from args if provided
}
util.inherits(AN2006AN, device.BaseDevice);

AN2006AN.prototype.init = function() {
    var rc = new Error("Unknown error");

    rc = this.preInit();
    if (rc instanceof Error) {
        return rc;
    }

    this.boardHandle = this.libvita.an2006an_new(this.portHandle);
    if (this.boardHandle <= 0) {
        return new Error("Failed to bind driver to " + this.getIdentifier());
    }

    // Set all pins as output
    rc = this.libvita.an2006an_setDirections(this.boardHandle, 0x0000);
    if (rc < 0) {
        this.close();
        return new Error("Failed to set directions on " + this.getIdentifier());
    }

    this.logger.info("done.");
    return 0;
}

AN2006AN.prototype.setChannel = function(channel, power) {
    var mask;
    var data;
    var rc = -1;

    if (channel < this.minChannel || channel > this.maxChannel) {
        return new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }
    if (power < 0 || power > 1) {
        return new Error("Invalid channel value for " + this.getIdentifier() + " Valid values are 1 and 0");
    }

    mask = this.libvita.an2006an_getInputs(this.boardHandle);

    if (power) {
        mask &= ~(1 << channel - 1); // Channel 1 is actually channel 0, etc.
    } else {
        mask |= (1 << channel - 1);
    }

    rc = this.libvita.an2006an_setOutputs(this.boardHandle, mask);

    if (rc < 0) {
        return new Error("Failed to turn " + (power? "on " : "off ") + "channel " + channel + " on " + this.getIdentifier());
    } else {
        data = {
            type: "Digital",
            value: power
        };

        this.emit("ansync-data", this.serial, this.alias, this.model, channel, data);
    }
}

AN2006AN.prototype.getChannel = function(channel) {
    var mask;
    var rc = -1;

    if (channel < this.minChannel || channel > this.maxChannel) {
        return new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }

    mask = this.libvita.an2006an_getInputs(this.boardHandle);

    if (mask & (1 << channel - 1)) {
        return false;
    } else {
        return true;
    }
}

AN2006AN.prototype.button = function(channel, power) {
    this.setChannel(channel, power);
}

exports.AN2006AN = AN2006AN;

