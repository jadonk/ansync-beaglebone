var util   = require('util'),
    device = require('./basedevice');

function AN2002(serial, alias, logger) {
    AN2002.super_.call(this, serial, alias, 'AN2002', 1, 9, logger);
}
util.inherits(AN2002, device.BaseDevice);

AN2002.prototype.init = function() {
    var rc = new Error('Unknown error');

    rc = this.preInit();
    if (rc instanceof Error) {
        return rc;
    }

    this.boardHandle = this.libvita.AN2002_new(this.portHandle, 0);
    if (this.boardHandle <= 0) {
        return new Error('Failed to bind driver to ' + this.getIdentifier());
    }

    // Set all channels as output and turn them off
    rc = this.libvita.AN2002_setDirections(this.boardHandle, 0x0000);
    if (rc < 0) {
        this.close();
        return new Error('Failed to set directions on ' + this.getIdentifier());
    }

    rc = this.libvita.AN2002_setOutputs(this.boardHandle, 0xFFFF);
    if (rc < 0) {
        this.close();
        return new Error('Failed to turn off all channels on ' + this.getIdentifier());
    }

    this.logger.info('done.');
    return 0;
}

AN2002.prototype.button = function(channel, power) {
    var mask;
    var data;
    var rc = -1;

    if (channel < this.minChannel || channel > this.maxChannel || power < 0 || power > 1) {
        return -1;
    }

    mask = this.libvita.AN2002_getInputs(this.boardHandle);

    if (power) {
        mask &= ~(1 << channel - 1); // Channel 1 is actually channel 0, etc.
    } else {
        mask |= (1 << channel - 1);
    }

    rc = this.libvita.AN2002_setOutputs(this.boardHandle, mask);

    if (rc < 0) {
        return new Error('Failed to turn ' + (power? 'on ' : 'off ') + 'channel ' + channel + ' on ' + this.getIdentifier());
    } else {
        data = {
            type: 'Digital',
            value: power
        };

        this.emit('ansync-data', this.serial, this.alias, this.model, channel, data);
    }
}

AN2002.prototype.getChannel = function(channel) {
    var mask;
    var rc = -1;

    if (channel < this.minChannel || channel > this.maxChannel) {
        return -1;
    }

    mask = this.libvita.AN2002_getInputs(this.boardHandle);

    if (mask & (1 << channel - 1)) {
        return false;
    } else {
        return true;
    }
}

exports.AN2002 = AN2002;
