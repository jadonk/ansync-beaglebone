var ref = require("ref");

getVitaFunctions = function(model) {
    var fxnHash = {};
    var charPtr  = ref.refType("CString");
    var floatPtr = ref.refType("float");
    var size_t   = ref.refType("size_t")

    fxnHash = {
        "vitaInit":                ["int", []                                  ],
        "vitaClose":               ["int", ["int"]                             ],
        "USBLIB_new":              ["int", ["uint", "uint", "string", "string"]],
        "USBLIB_close":            ["int", ["int"]                             ],
        "USBLIB_getProductString": ["int", ["int", charPtr]                    ],
        "ANUSB_getSerial":         ["int", ["int", "int", charPtr]             ]
    }

    switch(model.toUpperCase()) {
        case "AN2002":
                fxnHash["AN2002_new"]           = ["int",  ["int", "uchar"]];
                fxnHash["AN2002_setDirections"] = ["int",  ["int", "int"]  ];
                fxnHash["AN2002_setOutputs"]    = ["int",  ["int", "int"]  ];
                fxnHash["AN2002_getInputs"]     = ["uint", ["int"]         ];
            break;
        case "AN2003":
                fxnHash["AN2003_new"]           = ["int",  ["int", "uchar"]];
                fxnHash["AN2003_setDirections"] = ["int",  ["int", "int"]  ];
                fxnHash["AN2003_setOutputs"]    = ["int",  ["int", "int"]  ];
                fxnHash["AN2003_getInputs"]     = ["uint", ["int"]         ];
            break;
        case "AN2006":
                fxnHash["AN2006_new"]           = ["int",  ["int", "uchar"]];
                fxnHash["AN2006_setDirections"] = ["int",  ["int", "int"]  ];
                fxnHash["AN2006_setOutputs"]    = ["int",  ["int", "int"]  ];
                fxnHash["AN2006_getInputs"]     = ["uint", ["int"]         ];
            break;
        case "AN2006AN":
                fxnHash["an2006an_new"]           = ["int",  ["int"]       ];
                fxnHash["an2006an_setDirections"] = ["int",  ["int", "int"]];
                fxnHash["an2006an_setOutputs"]    = ["int",  ["int", "int"]];
                fxnHash["an2006an_getInputs"]     = ["uint", ["int"]       ];
                fxnHash["an2006an_timerstart"]    = ["uint", ["int"]       ];
                fxnHash["an2006an_watchstart"]    = ["uint", ["int"]       ];
            break;
        case "AN2012":
                fxnHash["AN2012_new"]           = ["int", ["int", "uchar"]        ];
                fxnHash["AN2012_setVolt"]       = ["int", ["int", "int", "int"]   ];
                fxnHash["AN2012_getVolt"]       = ["int", ["int", "int", floatPtr]];
                fxnHash["AN2012_setFetOut"]     = ["int", ["int", "int"]          ];
            break;
        case "AN2016":
                fxnHash["AN2016_new"]           = ["int",    ["int", "uchar"]      ];
                fxnHash["AN2016_requestInput"]  = ["int",    ["int", "int", "byte"]];
                fxnHash["AN2016_getStatus"]     = ["char",   ["int", "int"]        ];
                fxnHash["AN2016_getInput"]      = ["double", ["int", "int"]        ];
            break;
        case "AN2053":
                fxnHash["AN2053_new"]           = ["int", ["int"]                            ];
                fxnHash["AN2053_setMotor"]      = ["int", ["int", "int", "float", "int"]     ];
                fxnHash["AN2053_setPwm"]        = ["int", ["int", "int", "int", "int", "int"]];
            break;
        default:
            break;
    }

    return fxnHash;
}

module.exports.getVitaFunctions = getVitaFunctions;
