var util   = require("util"),
    ref    = require("ref"),
    device = require("./basedevice");

function AN2012(serial, alias, logger) {
    AN2012.super_.call(this, serial, alias, "AN2012", 1, 2, logger);
    this.parameters.minValue = 0.0;
    this.parameters.maxValue = 6.0;
}
util.inherits(AN2012, device.BaseDevice);

AN2012.prototype.init = function() {
    var rc = new Error("Unknown error");

    rc = this.preInit();
    if (rc instanceof Error) {
        return rc;
    }

    this.boardHandle = this.libvita.AN2012_new(this.portHandle, 0);
    if (this.boardHandle <= 0) {
        return new Error("Failed to bind driver to " + this.getIdentifier());
    }

    this.logger.info("done.");
    return 0;
}

AN2012.prototype.setVoltage = function(channel, voltage) {
    var rc = -1;
    var volts = (parseFloat(voltage).toFixed(2)) * 100;

    rc = this.libvita.AN2012_setVolt(this.boardHandle, channel - 1, volts);
    if (rc < 0) {
        return new Error("Failed to set voltage " + voltage + " for " + this.getIdentifier() + " on channel " + channel);
    }

    return rc;
}

AN2012.prototype.getVoltage = function(channel) {
    var rc = -1;
    var voltage = ref.alloc(ref.types.float);

    rc = this.libvita.AN2012_getVolt(this.boardHandle, parseInt(channel), voltage);
    if (rc < 0) {
        return new Error("Failed to read voltage from " + this.getIdentifier() + " on channel " + channel);
    }

    data = {
        type: "Analog",
        value: parseFloat(voltage.deref().toFixed(4)),
        units: "Volts"
    };
    this.logger.debug("Voltage from " + this.getIdentifier() + ": " + voltage.deref().toFixed(4));
    this.emit("ansync-data", this.serial, this.alias, this.model, channel, data);
}

AN2012.prototype.getChannel = function(channel) {
    if (channel < this.minChannel || channel > this.maxChannel) {
        return new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }

    return(this.getVoltage(channel));
}

AN2012.prototype.setChannel = function(channel, voltage) {
    this.setVoltage(channel, voltage);
}

AN2012.prototype.slider = function(channel, value) {
    if (channel < this.minChannel || channel > this.maxChannel) {
        return new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }
    if (value < this.minVoltage || value > this.maxVoltage) {
        return new Error("Invalid voltage for " + this.getIdentifier() + ".  Valid voltages are " + this.minVoltage + " to " + this.maxChannel);
    }

    this.setChannel(channel, voltage);
}

AN2012.prototype.poll = function(channel) {
    if (channel < this.minChannel || channel > this.maxChannel) {
        return new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }
    this.getChannel(channel);
}

exports.AN2012 = AN2012;
