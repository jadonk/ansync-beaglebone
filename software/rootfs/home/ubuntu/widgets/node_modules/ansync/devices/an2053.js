var util   = require("util"),
    device = require("./basedevice");

function AN2053(serial, alias, logger) {
    AN2053.super_.call(this, serial, alias, "AN2053", 1, 1, logger);

    this.parameters.minValue = -1.0;
    this.parameters.maxValue =  1.0;
}
util.inherits(AN2053, device.BaseDevice);

AN2053.prototype.init = function() {
    var rc = new Error("Unknown error");

    rc = this.preInit();
    if (rc instanceof Error) {
        return rc;
    }

    this.boardHandle = this.libvita.AN2053_new(this.portHandle);
    if (this.boardHandle <= 0) {
        return new Error("Failed to bind driver to " + this.getIdentifier());
    }

    this.logger.info("done.");
    return 0;
}

AN2053.prototype.setChannel = function(channel, dutyCycle) {
    var mask;
    var rc = new Error("Unknown error");
    var direction = 0;

    if (isNaN(channel) || channel < this.minChannel || channel > this.maxChannel) {
        rc = new Error("Invalid channel for " + this.getIdentifier() + ".  Valid channels are " + this.minChannel + " to " + this.maxChannel);
    }
    if (isNaN(dutyCycle) || Math.abs(dutyCycle) > 1) {
        rc = new Error("Invalid duty cycle for " + this.getIdentifier() + " Valid values are -1.0 to 1.0");
    }

    if (dutyCycle > 0) {
        direction = 1;
    } else if (dutyCycle < 0) {
        direction = 2;
    }

    rc = this.libvita.AN2053_setMotor(this.boardHandle, direction, Math.abs(dutyCycle), 0);
    if (rc < 0) {
        rc = new Error("Failed to set duty cycle of " + dutyCycle + " on " + this.getIdentifier());
    }

    //temporary fix until fpga encoder code
    this.dcstore = dutyCycle;

    return rc;
}

AN2053.prototype.getChannel = function(channel) {
    // TODO need new FPGA code before we implement
    return 0.5; //this.dcstore;
}

AN2053.prototype.button = function(channel, dutyCycle) {
    this.setChannel(channel, dutyCycle);
}

AN2053.prototype.slider = function(channel, dutyCycle) {
    this.setChannel(channel, dutyCycle);
}

AN2053.prototype.poll = function(channel, dutyCycle) {
    this.getChannel(channel);
}

exports.AN2053 = AN2053;

